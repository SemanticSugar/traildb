#!/usr/bin/env python
"""
tdb info TRAILDB ...
tdb get TRAILDB ... [-i ID ...]
tdb cat TRAILDB ... [-f FIELD ...]
tdb lex TRAILDB ... [-f FIELD ...]
tdb merge TRAILDB ... [-o OUTDB]
"""

import os
import sys
import argparse
import itertools

from traildb import TrailDB, TrailDBConstructor

def tabify(iter, fmt='%s'):
    return '\t'.join(fmt % x for x in iter)

def help():
    print(__doc__.strip())

def info(args, opts):
    for arg in args:
        tdb = TrailDB(arg)
        print '%s' % arg
        print ' # trails:                    %12d' % tdb.num_trails
        print ' # events:                    %12d' % tdb.num_events
        print ' # fields:                    %12d' % tdb.num_fields
        for f in tdb.fields[1:]:
            print ' # -%-25s %12d' % (f + ':', tdb.lexicon_size(f))
        tmin, tmax = tdb.time_range(ptime=True)
        print u' \u2265 time:               %s' % tmin
        print u' \u2264 time:               %s' % tmax

def get(args, opts):
    for arg in args:
        tdb = TrailDB(arg)
        fields = opts.field or tdb.fields
        for id in opts.id or [0]:
            id = int(id)
            cookie = tdb.cookie(id)
            for event in tdb.trail(id, ptime=True):
                print '%s\t%s' % (cookie, '\t'.join(str(getattr(event, f)) for f in fields))

def lex(args, opts):
    for arg in args:
        tdb = TrailDB(arg)
        for field in opts.field or tdb.fields[1:]:
            for value in tdb.lexicon(field):
                print '%s\t%s' % (field, value)

def cat(args, opts):
    for arg in args:
        tdb = TrailDB(arg)
        if opts.field:
            for cookie, trail in tdb.crumbs():
                for event in trail:
                    print '%s\t%s' % (cookie, tabify(getattr(event, f) for f in opts.field))
        else:
            for cookie, trail in tdb.crumbs():
                print cookie, trail

def merge(args, opts):
    for n, arg in enumerate(args):
        tdb = TrailDB(arg)
        if n == 0:
            cons = TrailDBConstructor(opts.outdb, tdb.fields[1:])
        cons.append(tdb)
    cons.finalize()

def split(args, opts):
    out = opts.outdb
    fmt = out if '%' in out else '.%02d.'.join(out.split('.'))
    for arg in args:
        tdb = TrailDB(arg)
        tdb.split(opts.num_parts, fmt=fmt)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--id',
                        action='append',
                        help="id to get")
    parser.add_argument('-f', '--field',
                        action='append',
                        help="name of field to operate on")
    parser.add_argument('-o', '--outdb',
                        default='a.tdb',
                        help="name of output dbs for split / merge")
    parser.add_argument('-n', '--num-parts',
                        default=1,
                        type=int,
                        help="number of parts")
    opts, args = parser.parse_known_args(sys.argv[1:])
    cmd, args = args[0] if args else 'help', args[1:]
    if cmd == 'help':
        return help()
    return eval(cmd)(args, opts)

if __name__ == '__main__':
    main()
